{"version":3,"sources":["Components/IconOutline.js","OuterComponents/GooeyReact.js","Components/MainPage.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["IconOutline","props","useState","setHover","Popup","trigger","target","href","Header","as","style","margin","color","background","icon","Icon","inverted","name","size","onMouseEnter","onMouseLeave","content","position","GooeyReact","intensity","animation","marginTop","width","height","cx","cy","fill","r","MainPage","h1","fontSize","backgroundColor","h2","subheader","textAlign","sub","Divider","horizontal","Footer","bottom","marginBottom","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAqCeA,MAlCf,SAAqBC,GAAO,MAEEC,oBAAS,GAFX,mBAEVC,GAFU,WAY1B,OACE,kBAACC,EAAA,EAAD,CACEC,QACE,uBAAKC,OAAO,SAASC,KAAMN,EAAMM,MAC/B,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAXhB,CACJC,OAAQ,OACRC,MAAO,MACPC,WAAY,SAQ2BC,MAAI,GACrC,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRJ,MAAM,QACNK,KAAMhB,EAAMgB,KACZC,KAAK,OACLC,aAAc,kBAAMhB,GAAS,IAC7BiB,aAAc,kBAAMjB,GAAS,QAKrCkB,QAASpB,EAAMoB,QACfC,SAAS,gBACTN,UAAQ,K,SCVCO,MApBf,WACE,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAKd,MAAO,CAAEe,UAAW,+BAAgCC,UAAW,QAClE,yBAAKC,MAAM,MAAMC,OAAO,OACtB,4BACEC,GAAG,MACHC,GAAG,MACHC,KAAK,oBACLC,EAAE,OAEJ,4BAAQH,GAAG,MAAMC,GAAG,MAAMC,KAAK,gBAAgBC,EAAE,OACjD,4BAAQH,GAAG,MAAMC,GAAG,MAAMC,KAAK,mBAAmBC,EAAE,WCmD/CC,MA9Df,WACE,IAAMvB,EAAQ,CACZwB,GAAI,CACFC,SAAU,OAEZtB,WAAY,CACVuB,gBAAiB,SAEnBtB,KAAM,CACJH,OAAQ,QAEV0B,GAAI,CACFF,SAAU,WAGd,OACE,6BACE,kBAAC,EAAD,CAAYzB,MAAOA,EAAMwB,KACzB,kBAAC1B,EAAA,EAAD,CACEC,GAAG,KACHY,QAAQ,gBACRiB,UAAU,8CACV5B,MAAOA,EAAMwB,GACbK,UAAU,SACVrB,KAAK,SAET,kBAACV,EAAA,EAAD,CAAQgC,KAAG,GAAX,qBAEE,kBAAChC,EAAA,EAAD,CACEC,GAAG,KACHC,MAAOA,EAAM2B,GACbC,UAAU,2GACVC,UAAU,WAGZ,kBAAC,EAAD,CAAatB,KAAK,iBAAiBI,QAAQ,SAASd,KAAK,2EACzD,kBAAC,EAAD,CACEU,KAAK,WACLI,QAAQ,WACRd,KAAK,8CAEP,kBAAC,EAAD,CACEU,KAAK,SACLI,QAAQ,SACRd,KAAK,oCAGP,kBAAC,EAAD,CACEU,KAAK,OACLI,QAAQ,QACRd,KAAK,qCAGP,kBAACkC,EAAA,EAAD,CAASC,YAAU,GACjB,kBAAClC,EAAA,EAAD,CAAQC,GAAG,MACT,kBAACM,EAAA,EAAD,CAAME,KAAK,aAAaD,UAAQ,EAACJ,MAAM,cC9ClC+B,MAXf,WASE,OAAO,yBAAKjC,MARC,CAEXkC,OAAQ,IACRL,UAAW,SACXb,UAAU,QACVmB,aAAa,QAGR,sD,OCIMC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAS,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.114b1c74.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Header, Icon, Popup } from \"semantic-ui-react\";\r\n\r\nfunction IconOutline(props) {\r\n  //React hooks for hover css options\r\n  const [inHover, setHover] = useState(false);\r\n\r\n  const style = {\r\n    icon: {\r\n      margin: \"3rem\",\r\n      color: \"red\",\r\n      background: \"white\",\r\n    },\r\n  };\r\n  \r\n  return (\r\n    <Popup\r\n      trigger={\r\n        <a   target=\"_blank\" href={props.href}  >\r\n          <Header as=\"h5\" style={style.icon} icon>\r\n            <Icon\r\n              inverted\r\n              color=\"black\"\r\n              name={props.name}\r\n              size=\"huge\"\r\n              onMouseEnter={() => setHover(true)}\r\n              onMouseLeave={() => setHover(false)}\r\n            />\r\n          </Header>\r\n        </a>\r\n      }\r\n      content={props.content}\r\n      position=\"bottom center\"\r\n      inverted\r\n    />\r\n  );\r\n}\r\nexport default IconOutline;\r\n","import React from \"react\";\r\nimport Goo from \"gooey-react\";\r\n\r\nfunction GooeyReact() {\r\n  return (\r\n    <div intensity=\"strong\">\r\n      <Goo style={{ animation: \"floating  8s linear infinite\", marginTop: \"5em\" }}>\r\n        <svg width=\"192\" height=\"192\">\r\n          <circle\r\n            cx=\"37%\"\r\n            cy=\"37%\"\r\n            fill=\"mediumspringgreen\"\r\n            r=\"46\"\r\n          />\r\n          <circle cx=\"63%\" cy=\"63%\" fill=\"lightseagreen\" r=\"40\" />\r\n          <circle cx=\"23%\" cy=\"83%\" fill=\"mediumaquamarine\" r=\"20\" />\r\n\r\n        </svg>\r\n      </Goo>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GooeyReact;\r\n","import React from \"react\";\r\nimport { Feed, Card, Header, Icon, Image, Divider } from \"semantic-ui-react\";\r\nimport IconOutline from \"./IconOutline\";\r\nimport GooeyReact from \"../OuterComponents/GooeyReact\";\r\nfunction MainPage() {\r\n  const style = {\r\n    h1: {\r\n      fontSize: \"3em\",\r\n    },\r\n    background: {\r\n      backgroundColor: \"#FFF2\",\r\n    },\r\n    icon: {\r\n      margin: \"1rem\",\r\n    },\r\n    h2: {\r\n      fontSize: \"1.5rem\",\r\n    },\r\n  };\r\n  return (\r\n    <div>\r\n      <GooeyReact style={style.h1} />\r\n      <Header\r\n        as=\"h1\"\r\n        content=\"Ronan Almeida\"\r\n        subheader=\"Welcome to my personal website ðŸ‘‹\"\r\n        style={style.h1}\r\n        textAlign=\"center\"\r\n        size=\"huge\"\r\n      />\r\n    <Header sub>Software Engineer</Header>\r\n\r\n      <Header\r\n        as=\"h1\"\r\n        style={style.h2}\r\n        subheader=\"Passionate about combing impactful software and algorithmic thinking to deliver effective user solutions\"\r\n        textAlign=\"center\"\r\n      />\r\n    \r\n      <IconOutline name=\"file alternate\" content=\"Resume\" href=\"https://drive.google.com/file/d/1Wjk8jy3bsXGBi9BfjVe4Up_F1gmYFcGf/view\" />\r\n      <IconOutline\r\n        name=\"linkedin\"\r\n        content=\"LinkedIn\"\r\n        href=\"https://www.linkedin.com/in/ronanalmeida/\"\r\n      />\r\n      <IconOutline\r\n        name=\"github\"\r\n        content=\"Github\"\r\n        href=\"https://github.com/RonanAlmeida\"\r\n      />\r\n\r\n      <IconOutline\r\n        name=\"mail\"\r\n        content=\"Email\"\r\n        href=\"mailto: ronan.almeida@queensu.ca\"\r\n      />\r\n\r\n      <Divider horizontal>\r\n        <Header as=\"h2\">\r\n          <Icon name=\"angle down\" inverted color=\"black\"></Icon>\r\n        </Header>\r\n      </Divider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  const Item = {\r\n    // position: \"fixed\",\r\n    bottom: \"0\",\r\n    textAlign: 'center',\r\n    marginTop:'100em',\r\n    marginBottom:'1em'\r\n\r\n  };\r\n  return <div style={Item}>ðŸš§ Site Under Construction ðŸš§</div>;\r\n}\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport MainPage from \"./Components/MainPage\";\r\nimport Footer from \"./Components/Footer\"\r\nimport \"./App.css\";\r\n// import HomepageLayout from './Components/HomepageLayout';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainPage />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(  <App /> ,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}